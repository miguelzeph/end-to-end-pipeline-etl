version: '3'

##############################################################################
############################## AIRFLOW #######################################
##############################################################################
x-airflow-common:
  &airflow-common
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.3} # REPLACE this IMAGE from the DOCKERFILE_PYTHON, this way you can install Python libraries using your own image and import it on the DAGS... or keep it and add the variable _PIP_ADDITIONAL_REQUIREMENTS
  build:
    context: .
    dockerfile: airflow/Dockerfile_python
  environment:
    &airflow-common-env
    AIRFLOW_UID: 50000
    AIRFLOW__CORE__EXECUTOR: SequentialExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__FAB__UPDATE_FAB_PERMS: 'true'
    AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY:-}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    GUNICORN_CMD_ARGS: "--timeout 300"
    PYTHONWARNINGS: "ignore:invalid escape sequence"
    # Add Python Libraries
    # _PIP_ADDITIONAL_REQUIREMENTS: "confluent-kafka"
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'airflow scheduler' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ./airflow:/sources
##############################################################################
############################## END AIRFLOW ###################################
##############################################################################

##############################################################################
############################## KAFKA #######################################
##############################################################################

  zookeeper: # Manager of Kafka Cluster
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: always

  kafka-broker-1:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    container_name: kafka-broker-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 20s
    restart: always

  kafka-broker-2:
    image: wurstmeister/kafka
    depends_on: 
      - zookeeper
    container_name: kafka-broker-2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9093"]
      interval: 30s
      retries: 5
      start_period: 60s
      timeout: 20s
    restart: always

  kafka-consumer-print-articles:
    build:
      context: .
      dockerfile: kafka/Dockerfile_python
    container_name: consumer-print-articles
    command: python consumer_print_articles.py
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://kafka-broker-1:9092"]
      interval: 30s
      retries: 5
      start_period: 60s
      timeout: 20s

  kafka-consumer-message-to-topic:
    build:
      context: .
      dockerfile: kafka/Dockerfile_python
    container_name: consumer-message-to-topic
    command: python consumer_message_to_topic.py
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://kafka-broker-1:9092"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 20s

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8001:8001"
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - zookeeper
    environment:
      SERVER_PORT: 8001
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka-broker-1:9092,kafka-broker-2:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_UI_AUTH_ENABLED: true
      KAFKA_UI_AUTH_USER: admin
      KAFKA_UI_AUTH_PASSWORD: admin_password

##############################################################################
############################## END KAFKA ###################################
##############################################################################

volumes:
  postgres-db-volume:
